//高精度小数位+进制转换 *****

//思路：从最后一位开始计算每次/8算出对应位数上的直，在进行进位操作

/*样例解释 35

1  5/8
2  (1+5/8)/8  (将5/8所得数字转化为整数625)
3  (1+625)/8
4  453125

*/

/*
题目描述
给定一个八进制的纯小数（不含循环节），输出它的十进制表示。
例如 (0.1)8=(0.125)10，(0.35)8=(0.453125)10。

输入
一个数字序列：表示一个八进制数字的小数部分。

输出
一个数字序列：表示给定数字的十进制的小数部分。

样例输入
【样例1】
1
【样例2】
35
【样例3】
7242277601055164353520162433542306213151745707
样例输出 Copy
【样例1】
125
【样例2】
453125
【样例3】
914642215788676296977281679198591687117990359241570429327484591383675898009085323719113101375937334436283521199584356509149074554443359375
提示
设 n 表示输入序列的长度

+ 对于 30% 的数据，n≤ 5
+ 对于 60% 的数据，n≤ 50
+ 对于 100% 的数据，n≤ 500
*/


#include<bits/stdc++.h>
#define fastin ios::sync_with_stdio(0);cin.tie(0);cout.tie(0)
using namespace std;
const int N=1e6+50;
const int inf=1e9;
typedef long long ll;
typedef unsigned long long ull;

int a[N];
int idx;
int x;
string s;

signed main()
{
	fastin;
	cin>>s;
	int n=s.size();
	for(int i=n-1;i>=0;i--)
	{
		x=s[i]-'0';
		int j=0;
		while(x>0 || j<=idx)
		{
			j++;
			x=x*10+a[j];
			a[j]=x/8;
			x%=8;
		}
		idx=j;
	}
	for(int i=1;i<=idx;i++) cout<<a[i];
}